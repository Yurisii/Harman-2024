
test04-Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000c0e  00000ca2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800110  00800110  00000cb2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001167  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6f  00000000  00000000  00001f37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000964  00000000  00000000  000029a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  0000330c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004da  00000000  00000000  00003620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d79  00000000  00000000  00003afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004873  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	38 c4       	rjmp	.+2160   	; 0x886 <__vector_5>
  16:	00 00       	nop
  18:	73 c5       	rjmp	.+2790   	; 0xb00 <__vector_6>
  1a:	00 00       	nop
  1c:	92 c5       	rjmp	.+2852   	; 0xb42 <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	f5 c3       	rjmp	.+2026   	; 0x824 <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e0       	ldi	r30, 0x0E	; 14
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 32       	cpi	r26, 0x23	; 35
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c0 d2       	rcall	.+1408   	; 0x644 <main>
  c4:	a2 c5       	rjmp	.+2884   	; 0xc0a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <PortSet>:
		arr[3] = 0;
	}
	k = (num > 4095) ? 4 : (num > 256) ? 3 : (num > 16) ? 2 : 1;
	FND_4(arr);
	return arr;
}
  c8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <PC+0x1>
  cc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PC>
  d0:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <PD+0x1>
  d4:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <PD>
  d8:	08 95       	ret

000000da <seg>:
  da:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PC>
  de:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PC+0x1>
  e2:	20 81       	ld	r18, Z
  e4:	2f 60       	ori	r18, 0x0F	; 15
  e6:	20 83       	st	Z, r18
  e8:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PC>
  ec:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PC+0x1>
  f0:	23 e0       	ldi	r18, 0x03	; 3
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	28 1b       	sub	r18, r24
  f6:	39 0b       	sbc	r19, r25
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <seg+0x28>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	2a 95       	dec	r18
 104:	e2 f7       	brpl	.-8      	; 0xfe <seg+0x24>
 106:	80 95       	com	r24
 108:	90 81       	ld	r25, Z
 10a:	89 23       	and	r24, r25
 10c:	80 83       	st	Z, r24
 10e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PD>
 112:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PD+0x1>
 116:	60 83       	st	Z, r22
 118:	8f e3       	ldi	r24, 0x3F	; 63
 11a:	9f e1       	ldi	r25, 0x1F	; 31
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <seg+0x42>
 120:	00 c0       	rjmp	.+0      	; 0x122 <seg+0x48>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <FND_4>:
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	8c 01       	movw	r16, r24
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	d0 e0       	ldi	r29, 0x00	; 0
 134:	07 c0       	rjmp	.+14     	; 0x144 <FND_4+0x1e>
 136:	f8 01       	movw	r30, r16
 138:	ec 0f       	add	r30, r28
 13a:	fd 1f       	adc	r31, r29
 13c:	60 81       	ld	r22, Z
 13e:	ce 01       	movw	r24, r28
 140:	cc df       	rcall	.-104    	; 0xda <seg>
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14c:	c8 17       	cp	r28, r24
 14e:	d9 07       	cpc	r29, r25
 150:	94 f3       	brlt	.-28     	; 0x136 <FND_4+0x10>
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

0000015c <seg_state>:
 15c:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <state>
 160:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <state+0x1>
 164:	21 50       	subi	r18, 0x01	; 1
 166:	31 09       	sbc	r19, r1
 168:	28 17       	cp	r18, r24
 16a:	39 07       	cpc	r19, r25
 16c:	29 f1       	breq	.+74     	; 0x1b8 <seg_state+0x5c>
 16e:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PC>
 172:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PC+0x1>
 176:	20 81       	ld	r18, Z
 178:	2f 60       	ori	r18, 0x0F	; 15
 17a:	20 83       	st	Z, r18
 17c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PC>
 180:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PC+0x1>
 184:	23 e0       	ldi	r18, 0x03	; 3
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	28 1b       	sub	r18, r24
 18a:	39 0b       	sbc	r19, r25
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <seg_state+0x3a>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	2a 95       	dec	r18
 198:	e2 f7       	brpl	.-8      	; 0x192 <seg_state+0x36>
 19a:	80 95       	com	r24
 19c:	90 81       	ld	r25, Z
 19e:	89 23       	and	r24, r25
 1a0:	80 83       	st	Z, r24
 1a2:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PD>
 1a6:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PD+0x1>
 1aa:	60 83       	st	Z, r22
 1ac:	8f e3       	ldi	r24, 0x3F	; 63
 1ae:	9f e1       	ldi	r25, 0x1F	; 31
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <seg_state+0x54>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <seg_state+0x5a>
 1b6:	00 00       	nop
 1b8:	08 95       	ret

000001ba <FND_x>:
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	8c 01       	movw	r16, r24
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
 1c8:	07 c0       	rjmp	.+14     	; 0x1d8 <FND_x+0x1e>
 1ca:	f8 01       	movw	r30, r16
 1cc:	ec 0f       	add	r30, r28
 1ce:	fd 1f       	adc	r31, r29
 1d0:	60 81       	ld	r22, Z
 1d2:	ce 01       	movw	r24, r28
 1d4:	82 df       	rcall	.-252    	; 0xda <seg>
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	c4 30       	cpi	r28, 0x04	; 4
 1da:	d1 05       	cpc	r29, r1
 1dc:	b4 f3       	brlt	.-20     	; 0x1ca <FND_x+0x10>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <FND_state>:
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	8c 01       	movw	r16, r24
 1f2:	c0 e0       	ldi	r28, 0x00	; 0
 1f4:	d0 e0       	ldi	r29, 0x00	; 0
 1f6:	07 c0       	rjmp	.+14     	; 0x206 <FND_state+0x1e>
 1f8:	f8 01       	movw	r30, r16
 1fa:	ec 0f       	add	r30, r28
 1fc:	fd 1f       	adc	r31, r29
 1fe:	60 81       	ld	r22, Z
 200:	ce 01       	movw	r24, r28
 202:	ac df       	rcall	.-168    	; 0x15c <seg_state>
 204:	21 96       	adiw	r28, 0x01	; 1
 206:	c4 30       	cpi	r28, 0x04	; 4
 208:	d1 05       	cpc	r29, r1
 20a:	b4 f3       	brlt	.-20     	; 0x1f8 <FND_state+0x10>
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	08 95       	ret

00000216 <DecDisp>:

char* DecDisp(unsigned long num)		// 기본 시간 함수
{	
 216:	4f 92       	push	r4
 218:	5f 92       	push	r5
 21a:	6f 92       	push	r6
 21c:	7f 92       	push	r7
 21e:	8f 92       	push	r8
 220:	9f 92       	push	r9
 222:	af 92       	push	r10
 224:	bf 92       	push	r11
 226:	cf 92       	push	r12
 228:	df 92       	push	r13
 22a:	ef 92       	push	r14
 22c:	ff 92       	push	r15
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62
 236:	28 97       	sbiw	r28, 0x08	; 8
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	f8 94       	cli
 23c:	de bf       	out	0x3e, r29	; 62
 23e:	0f be       	out	0x3f, r0	; 63
 240:	cd bf       	out	0x3d, r28	; 61
 242:	6b 01       	movw	r12, r22
 244:	7c 01       	movw	r14, r24
	int n1 = num % 10;			
 246:	0f 2e       	mov	r0, r31
 248:	fa e0       	ldi	r31, 0x0A	; 10
 24a:	8f 2e       	mov	r8, r31
 24c:	91 2c       	mov	r9, r1
 24e:	a1 2c       	mov	r10, r1
 250:	b1 2c       	mov	r11, r1
 252:	f0 2d       	mov	r31, r0
 254:	a5 01       	movw	r20, r10
 256:	94 01       	movw	r18, r8
 258:	b6 d4       	rcall	.+2412   	; 0xbc6 <__udivmodsi4>
 25a:	69 83       	std	Y+1, r22	; 0x01
 25c:	7a 83       	std	Y+2, r23	; 0x02
 25e:	8b 83       	std	Y+3, r24	; 0x03
 260:	9c 83       	std	Y+4, r25	; 0x04
	int n2 = (num / 10) % 6;	
 262:	0f 2e       	mov	r0, r31
 264:	f6 e0       	ldi	r31, 0x06	; 6
 266:	4f 2e       	mov	r4, r31
 268:	51 2c       	mov	r5, r1
 26a:	61 2c       	mov	r6, r1
 26c:	71 2c       	mov	r7, r1
 26e:	f0 2d       	mov	r31, r0
 270:	ca 01       	movw	r24, r20
 272:	b9 01       	movw	r22, r18
 274:	a3 01       	movw	r20, r6
 276:	92 01       	movw	r18, r4
 278:	a6 d4       	rcall	.+2380   	; 0xbc6 <__udivmodsi4>
 27a:	6d 83       	std	Y+5, r22	; 0x05
 27c:	7e 83       	std	Y+6, r23	; 0x06
 27e:	8f 83       	std	Y+7, r24	; 0x07
 280:	98 87       	std	Y+8, r25	; 0x08
	int n3 = (num / 60) % 10;	
 282:	c7 01       	movw	r24, r14
 284:	b6 01       	movw	r22, r12
 286:	2c e3       	ldi	r18, 0x3C	; 60
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	9b d4       	rcall	.+2358   	; 0xbc6 <__udivmodsi4>
 290:	ca 01       	movw	r24, r20
 292:	b9 01       	movw	r22, r18
 294:	a5 01       	movw	r20, r10
 296:	94 01       	movw	r18, r8
 298:	96 d4       	rcall	.+2348   	; 0xbc6 <__udivmodsi4>
 29a:	4b 01       	movw	r8, r22
 29c:	5c 01       	movw	r10, r24
	int n4 = (num / 100) % 6;		
 29e:	c7 01       	movw	r24, r14
 2a0:	b6 01       	movw	r22, r12
 2a2:	24 e6       	ldi	r18, 0x64	; 100
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	8d d4       	rcall	.+2330   	; 0xbc6 <__udivmodsi4>
 2ac:	ca 01       	movw	r24, r20
 2ae:	b9 01       	movw	r22, r18
 2b0:	a3 01       	movw	r20, r6
 2b2:	92 01       	movw	r18, r4
 2b4:	88 d4       	rcall	.+2320   	; 0xbc6 <__udivmodsi4>
	
	arr[0] = dec[n1]; arr[1] = dec[n2]; arr[2] = dec[n3]; arr[3] = dec[n4];
 2b6:	e9 81       	ldd	r30, Y+1	; 0x01
 2b8:	fa 81       	ldd	r31, Y+2	; 0x02
 2ba:	ea 5f       	subi	r30, 0xFA	; 250
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	20 81       	ld	r18, Z
 2c0:	ee e1       	ldi	r30, 0x1E	; 30
 2c2:	f1 e0       	ldi	r31, 0x01	; 1
 2c4:	20 83       	st	Z, r18
 2c6:	ad 81       	ldd	r26, Y+5	; 0x05
 2c8:	be 81       	ldd	r27, Y+6	; 0x06
 2ca:	aa 5f       	subi	r26, 0xFA	; 250
 2cc:	be 4f       	sbci	r27, 0xFE	; 254
 2ce:	2c 91       	ld	r18, X
 2d0:	21 83       	std	Z+1, r18	; 0x01
 2d2:	d4 01       	movw	r26, r8
 2d4:	aa 5f       	subi	r26, 0xFA	; 250
 2d6:	be 4f       	sbci	r27, 0xFE	; 254
 2d8:	2c 91       	ld	r18, X
 2da:	22 83       	std	Z+2, r18	; 0x02
 2dc:	db 01       	movw	r26, r22
 2de:	aa 5f       	subi	r26, 0xFA	; 250
 2e0:	be 4f       	sbci	r27, 0xFE	; 254
 2e2:	8c 91       	ld	r24, X
 2e4:	83 83       	std	Z+3, r24	; 0x03
	
	if ( num<10 ){
 2e6:	8a e0       	ldi	r24, 0x0A	; 10
 2e8:	c8 16       	cp	r12, r24
 2ea:	d1 04       	cpc	r13, r1
 2ec:	e1 04       	cpc	r14, r1
 2ee:	f1 04       	cpc	r15, r1
 2f0:	20 f4       	brcc	.+8      	; 0x2fa <DecDisp+0xe4>
		arr[3] = 0; arr[1] = 0; arr[2] = 0;
 2f2:	13 82       	std	Z+3, r1	; 0x03
 2f4:	11 82       	std	Z+1, r1	; 0x01
 2f6:	12 82       	std	Z+2, r1	; 0x02
 2f8:	14 c0       	rjmp	.+40     	; 0x322 <DecDisp+0x10c>
	}
	else if ( num<60 ){
 2fa:	8c e3       	ldi	r24, 0x3C	; 60
 2fc:	c8 16       	cp	r12, r24
 2fe:	d1 04       	cpc	r13, r1
 300:	e1 04       	cpc	r14, r1
 302:	f1 04       	cpc	r15, r1
 304:	28 f4       	brcc	.+10     	; 0x310 <DecDisp+0xfa>
		arr[2] = 0; arr[3] = 0;
 306:	ee e1       	ldi	r30, 0x1E	; 30
 308:	f1 e0       	ldi	r31, 0x01	; 1
 30a:	12 82       	std	Z+2, r1	; 0x02
 30c:	13 82       	std	Z+3, r1	; 0x03
 30e:	09 c0       	rjmp	.+18     	; 0x322 <DecDisp+0x10c>
	}
	else if ( num<600 ){
 310:	88 e5       	ldi	r24, 0x58	; 88
 312:	c8 16       	cp	r12, r24
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	d8 06       	cpc	r13, r24
 318:	e1 04       	cpc	r14, r1
 31a:	f1 04       	cpc	r15, r1
 31c:	10 f4       	brcc	.+4      	; 0x322 <DecDisp+0x10c>
		arr[3] = 0;
 31e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <arr+0x3>
	}
	k = (num > 600) ? 4 : (num > 60) ? 3 : (num > 10) ? 2 : 1;
 322:	89 e5       	ldi	r24, 0x59	; 89
 324:	c8 16       	cp	r12, r24
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	d8 06       	cpc	r13, r24
 32a:	e1 04       	cpc	r14, r1
 32c:	f1 04       	cpc	r15, r1
 32e:	78 f4       	brcc	.+30     	; 0x34e <DecDisp+0x138>
 330:	8d e3       	ldi	r24, 0x3D	; 61
 332:	c8 16       	cp	r12, r24
 334:	d1 04       	cpc	r13, r1
 336:	e1 04       	cpc	r14, r1
 338:	f1 04       	cpc	r15, r1
 33a:	60 f4       	brcc	.+24     	; 0x354 <DecDisp+0x13e>
 33c:	8b e0       	ldi	r24, 0x0B	; 11
 33e:	c8 16       	cp	r12, r24
 340:	d1 04       	cpc	r13, r1
 342:	e1 04       	cpc	r14, r1
 344:	f1 04       	cpc	r15, r1
 346:	48 f0       	brcs	.+18     	; 0x35a <DecDisp+0x144>
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	08 c0       	rjmp	.+16     	; 0x35e <DecDisp+0x148>
 34e:	84 e0       	ldi	r24, 0x04	; 4
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	05 c0       	rjmp	.+10     	; 0x35e <DecDisp+0x148>
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 c0       	rjmp	.+4      	; 0x35e <DecDisp+0x148>
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 362:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	FND_4(arr);
 366:	8e e1       	ldi	r24, 0x1E	; 30
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	dd de       	rcall	.-582    	; 0x126 <FND_4>
	return arr;
}
 36c:	8e e1       	ldi	r24, 0x1E	; 30
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	28 96       	adiw	r28, 0x08	; 8
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	f8 94       	cli
 376:	de bf       	out	0x3e, r29	; 62
 378:	0f be       	out	0x3f, r0	; 63
 37a:	cd bf       	out	0x3d, r28	; 61
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	df 90       	pop	r13
 386:	cf 90       	pop	r12
 388:	bf 90       	pop	r11
 38a:	af 90       	pop	r10
 38c:	9f 90       	pop	r9
 38e:	8f 90       	pop	r8
 390:	7f 90       	pop	r7
 392:	6f 90       	pop	r6
 394:	5f 90       	pop	r5
 396:	4f 90       	pop	r4
 398:	08 95       	ret

0000039a <AllDisp>:

char* AllDisp(unsigned long num)		// 0인 자리까지 다 보여주는 함수
{	
 39a:	4f 92       	push	r4
 39c:	5f 92       	push	r5
 39e:	6f 92       	push	r6
 3a0:	7f 92       	push	r7
 3a2:	8f 92       	push	r8
 3a4:	9f 92       	push	r9
 3a6:	af 92       	push	r10
 3a8:	bf 92       	push	r11
 3aa:	cf 92       	push	r12
 3ac:	df 92       	push	r13
 3ae:	ef 92       	push	r14
 3b0:	ff 92       	push	r15
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
 3ba:	28 97       	sbiw	r28, 0x08	; 8
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	f8 94       	cli
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	cd bf       	out	0x3d, r28	; 61
 3c6:	2b 01       	movw	r4, r22
 3c8:	3c 01       	movw	r6, r24
	int n1 = num % 10;			
 3ca:	0f 2e       	mov	r0, r31
 3cc:	fa e0       	ldi	r31, 0x0A	; 10
 3ce:	cf 2e       	mov	r12, r31
 3d0:	d1 2c       	mov	r13, r1
 3d2:	e1 2c       	mov	r14, r1
 3d4:	f1 2c       	mov	r15, r1
 3d6:	f0 2d       	mov	r31, r0
 3d8:	a7 01       	movw	r20, r14
 3da:	96 01       	movw	r18, r12
 3dc:	f4 d3       	rcall	.+2024   	; 0xbc6 <__udivmodsi4>
 3de:	69 83       	std	Y+1, r22	; 0x01
 3e0:	7a 83       	std	Y+2, r23	; 0x02
 3e2:	8b 83       	std	Y+3, r24	; 0x03
 3e4:	9c 83       	std	Y+4, r25	; 0x04
	int n2 = (num / 10) % 6;	
 3e6:	0f 2e       	mov	r0, r31
 3e8:	f6 e0       	ldi	r31, 0x06	; 6
 3ea:	8f 2e       	mov	r8, r31
 3ec:	91 2c       	mov	r9, r1
 3ee:	a1 2c       	mov	r10, r1
 3f0:	b1 2c       	mov	r11, r1
 3f2:	f0 2d       	mov	r31, r0
 3f4:	ca 01       	movw	r24, r20
 3f6:	b9 01       	movw	r22, r18
 3f8:	a5 01       	movw	r20, r10
 3fa:	94 01       	movw	r18, r8
 3fc:	e4 d3       	rcall	.+1992   	; 0xbc6 <__udivmodsi4>
 3fe:	6d 83       	std	Y+5, r22	; 0x05
 400:	7e 83       	std	Y+6, r23	; 0x06
 402:	8f 83       	std	Y+7, r24	; 0x07
 404:	98 87       	std	Y+8, r25	; 0x08
	int n3 = (num / 60) % 10;	
 406:	c3 01       	movw	r24, r6
 408:	b2 01       	movw	r22, r4
 40a:	2c e3       	ldi	r18, 0x3C	; 60
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	d9 d3       	rcall	.+1970   	; 0xbc6 <__udivmodsi4>
 414:	ca 01       	movw	r24, r20
 416:	b9 01       	movw	r22, r18
 418:	a7 01       	movw	r20, r14
 41a:	96 01       	movw	r18, r12
 41c:	d4 d3       	rcall	.+1960   	; 0xbc6 <__udivmodsi4>
 41e:	6b 01       	movw	r12, r22
 420:	7c 01       	movw	r14, r24
	int n4 = (num / 600) % 6;	
 422:	c3 01       	movw	r24, r6
 424:	b2 01       	movw	r22, r4
 426:	28 e5       	ldi	r18, 0x58	; 88
 428:	32 e0       	ldi	r19, 0x02	; 2
 42a:	40 e0       	ldi	r20, 0x00	; 0
 42c:	50 e0       	ldi	r21, 0x00	; 0
 42e:	cb d3       	rcall	.+1942   	; 0xbc6 <__udivmodsi4>
 430:	ca 01       	movw	r24, r20
 432:	b9 01       	movw	r22, r18
 434:	a5 01       	movw	r20, r10
 436:	94 01       	movw	r18, r8
 438:	c6 d3       	rcall	.+1932   	; 0xbc6 <__udivmodsi4>
	
	arr[0] = dec[n1]; arr[1] = dec[n2]; arr[2] = dec[n3]; arr[3] = dec[n4];
 43a:	e9 81       	ldd	r30, Y+1	; 0x01
 43c:	fa 81       	ldd	r31, Y+2	; 0x02
 43e:	ea 5f       	subi	r30, 0xFA	; 250
 440:	fe 4f       	sbci	r31, 0xFE	; 254
 442:	20 81       	ld	r18, Z
 444:	ee e1       	ldi	r30, 0x1E	; 30
 446:	f1 e0       	ldi	r31, 0x01	; 1
 448:	20 83       	st	Z, r18
 44a:	ad 81       	ldd	r26, Y+5	; 0x05
 44c:	be 81       	ldd	r27, Y+6	; 0x06
 44e:	aa 5f       	subi	r26, 0xFA	; 250
 450:	be 4f       	sbci	r27, 0xFE	; 254
 452:	2c 91       	ld	r18, X
 454:	21 83       	std	Z+1, r18	; 0x01
 456:	d6 01       	movw	r26, r12
 458:	aa 5f       	subi	r26, 0xFA	; 250
 45a:	be 4f       	sbci	r27, 0xFE	; 254
 45c:	2c 91       	ld	r18, X
 45e:	22 83       	std	Z+2, r18	; 0x02
 460:	db 01       	movw	r26, r22
 462:	aa 5f       	subi	r26, 0xFA	; 250
 464:	be 4f       	sbci	r27, 0xFE	; 254
 466:	8c 91       	ld	r24, X
	FND_x(arr);
 468:	83 83       	std	Z+3, r24	; 0x03
 46a:	cf 01       	movw	r24, r30
 46c:	a6 de       	rcall	.-692    	; 0x1ba <FND_x>
	return arr;
}
 46e:	8e e1       	ldi	r24, 0x1E	; 30
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	28 96       	adiw	r28, 0x08	; 8
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	f8 94       	cli
 478:	de bf       	out	0x3e, r29	; 62
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	cd bf       	out	0x3d, r28	; 61
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	ff 90       	pop	r15
 484:	ef 90       	pop	r14
 486:	df 90       	pop	r13
 488:	cf 90       	pop	r12
 48a:	bf 90       	pop	r11
 48c:	af 90       	pop	r10
 48e:	9f 90       	pop	r9
 490:	8f 90       	pop	r8
 492:	7f 90       	pop	r7
 494:	6f 90       	pop	r6
 496:	5f 90       	pop	r5
 498:	4f 90       	pop	r4
 49a:	08 95       	ret

0000049c <AllDisp_state>:

char* AllDisp_state(unsigned long num)	// state 번호 제외 하고 다 보여주는 함수 > AllDisp와 교차로 사용해서 깜빡임
{	
 49c:	4f 92       	push	r4
 49e:	5f 92       	push	r5
 4a0:	6f 92       	push	r6
 4a2:	7f 92       	push	r7
 4a4:	8f 92       	push	r8
 4a6:	9f 92       	push	r9
 4a8:	af 92       	push	r10
 4aa:	bf 92       	push	r11
 4ac:	cf 92       	push	r12
 4ae:	df 92       	push	r13
 4b0:	ef 92       	push	r14
 4b2:	ff 92       	push	r15
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	28 97       	sbiw	r28, 0x08	; 8
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	2b 01       	movw	r4, r22
 4ca:	3c 01       	movw	r6, r24
	int n1 = num % 10;			
 4cc:	0f 2e       	mov	r0, r31
 4ce:	fa e0       	ldi	r31, 0x0A	; 10
 4d0:	cf 2e       	mov	r12, r31
 4d2:	d1 2c       	mov	r13, r1
 4d4:	e1 2c       	mov	r14, r1
 4d6:	f1 2c       	mov	r15, r1
 4d8:	f0 2d       	mov	r31, r0
 4da:	a7 01       	movw	r20, r14
 4dc:	96 01       	movw	r18, r12
 4de:	73 d3       	rcall	.+1766   	; 0xbc6 <__udivmodsi4>
 4e0:	69 83       	std	Y+1, r22	; 0x01
 4e2:	7a 83       	std	Y+2, r23	; 0x02
 4e4:	8b 83       	std	Y+3, r24	; 0x03
 4e6:	9c 83       	std	Y+4, r25	; 0x04
	int n2 = (num / 10) % 6;	
 4e8:	0f 2e       	mov	r0, r31
 4ea:	f6 e0       	ldi	r31, 0x06	; 6
 4ec:	8f 2e       	mov	r8, r31
 4ee:	91 2c       	mov	r9, r1
 4f0:	a1 2c       	mov	r10, r1
 4f2:	b1 2c       	mov	r11, r1
 4f4:	f0 2d       	mov	r31, r0
 4f6:	ca 01       	movw	r24, r20
 4f8:	b9 01       	movw	r22, r18
 4fa:	a5 01       	movw	r20, r10
 4fc:	94 01       	movw	r18, r8
 4fe:	63 d3       	rcall	.+1734   	; 0xbc6 <__udivmodsi4>
 500:	6d 83       	std	Y+5, r22	; 0x05
 502:	7e 83       	std	Y+6, r23	; 0x06
 504:	8f 83       	std	Y+7, r24	; 0x07
 506:	98 87       	std	Y+8, r25	; 0x08
	int n3 = (num / 60) % 10;	
 508:	c3 01       	movw	r24, r6
 50a:	b2 01       	movw	r22, r4
 50c:	2c e3       	ldi	r18, 0x3C	; 60
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	50 e0       	ldi	r21, 0x00	; 0
 514:	58 d3       	rcall	.+1712   	; 0xbc6 <__udivmodsi4>
 516:	ca 01       	movw	r24, r20
 518:	b9 01       	movw	r22, r18
 51a:	a7 01       	movw	r20, r14
 51c:	96 01       	movw	r18, r12
 51e:	53 d3       	rcall	.+1702   	; 0xbc6 <__udivmodsi4>
 520:	6b 01       	movw	r12, r22
 522:	7c 01       	movw	r14, r24
	int n4 = (num / 600) % 6;	
 524:	c3 01       	movw	r24, r6
 526:	b2 01       	movw	r22, r4
 528:	28 e5       	ldi	r18, 0x58	; 88
 52a:	32 e0       	ldi	r19, 0x02	; 2
 52c:	40 e0       	ldi	r20, 0x00	; 0
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	4a d3       	rcall	.+1684   	; 0xbc6 <__udivmodsi4>
 532:	ca 01       	movw	r24, r20
 534:	b9 01       	movw	r22, r18
 536:	a5 01       	movw	r20, r10
 538:	94 01       	movw	r18, r8
 53a:	45 d3       	rcall	.+1674   	; 0xbc6 <__udivmodsi4>
	
	arr[0] = dec[n1]; arr[1] = dec[n2]; arr[2] = dec[n3]; arr[3] = dec[n4];
 53c:	e9 81       	ldd	r30, Y+1	; 0x01
 53e:	fa 81       	ldd	r31, Y+2	; 0x02
 540:	ea 5f       	subi	r30, 0xFA	; 250
 542:	fe 4f       	sbci	r31, 0xFE	; 254
 544:	20 81       	ld	r18, Z
 546:	ee e1       	ldi	r30, 0x1E	; 30
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	20 83       	st	Z, r18
 54c:	ad 81       	ldd	r26, Y+5	; 0x05
 54e:	be 81       	ldd	r27, Y+6	; 0x06
 550:	aa 5f       	subi	r26, 0xFA	; 250
 552:	be 4f       	sbci	r27, 0xFE	; 254
 554:	2c 91       	ld	r18, X
 556:	21 83       	std	Z+1, r18	; 0x01
 558:	d6 01       	movw	r26, r12
 55a:	aa 5f       	subi	r26, 0xFA	; 250
 55c:	be 4f       	sbci	r27, 0xFE	; 254
 55e:	2c 91       	ld	r18, X
 560:	22 83       	std	Z+2, r18	; 0x02
 562:	db 01       	movw	r26, r22
 564:	aa 5f       	subi	r26, 0xFA	; 250
 566:	be 4f       	sbci	r27, 0xFE	; 254
 568:	8c 91       	ld	r24, X
	FND_state(arr);
 56a:	83 83       	std	Z+3, r24	; 0x03
 56c:	cf 01       	movw	r24, r30
 56e:	3c de       	rcall	.-904    	; 0x1e8 <FND_state>
	return arr;
}
 570:	8e e1       	ldi	r24, 0x1E	; 30
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	28 96       	adiw	r28, 0x08	; 8
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	de bf       	out	0x3e, r29	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	cd bf       	out	0x3d, r28	; 61
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	ff 90       	pop	r15
 586:	ef 90       	pop	r14
 588:	df 90       	pop	r13
 58a:	cf 90       	pop	r12
 58c:	bf 90       	pop	r11
 58e:	af 90       	pop	r10
 590:	9f 90       	pop	r9
 592:	8f 90       	pop	r8
 594:	7f 90       	pop	r7
 596:	6f 90       	pop	r6
 598:	5f 90       	pop	r5
 59a:	4f 90       	pop	r4
 59c:	08 95       	ret

0000059e <Toggle>:

void Toggle(char m)						// 설정 시간 도달 시 알림용 Toggle 함수
{
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
	for(int n = 0; n < 3; n++)
 5a6:	00 e0       	ldi	r16, 0x00	; 0
 5a8:	10 e0       	ldi	r17, 0x00	; 0
 5aa:	43 c0       	rjmp	.+134    	; 0x632 <Toggle+0x94>
	{
		char m = 1 << n;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	00 2e       	mov	r0, r16
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <Toggle+0x1a>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	0a 94       	dec	r0
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <Toggle+0x16>
		PORTA |= m;
 5bc:	9b b3       	in	r25, 0x1b	; 27
 5be:	98 2b       	or	r25, r24
 5c0:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c2:	2f ef       	ldi	r18, 0xFF	; 255
 5c4:	30 e7       	ldi	r19, 0x70	; 112
 5c6:	42 e0       	ldi	r20, 0x02	; 2
 5c8:	21 50       	subi	r18, 0x01	; 1
 5ca:	30 40       	sbci	r19, 0x00	; 0
 5cc:	40 40       	sbci	r20, 0x00	; 0
 5ce:	e1 f7       	brne	.-8      	; 0x5c8 <Toggle+0x2a>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <Toggle+0x34>
 5d2:	00 00       	nop
		_delay_ms(50);
		PORTA &= ~m;
 5d4:	9b b3       	in	r25, 0x1b	; 27
 5d6:	80 95       	com	r24
 5d8:	89 23       	and	r24, r25
 5da:	8b bb       	out	0x1b, r24	; 27
 5dc:	8f ef       	ldi	r24, 0xFF	; 255
 5de:	90 e7       	ldi	r25, 0x70	; 112
 5e0:	22 e0       	ldi	r18, 0x02	; 2
 5e2:	81 50       	subi	r24, 0x01	; 1
 5e4:	90 40       	sbci	r25, 0x00	; 0
 5e6:	20 40       	sbci	r18, 0x00	; 0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <Toggle+0x44>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <Toggle+0x4e>
 5ec:	00 00       	nop
		_delay_ms(50);
		for(int i = 0; i < 10; i++)
 5ee:	c0 e0       	ldi	r28, 0x00	; 0
 5f0:	d0 e0       	ldi	r29, 0x00	; 0
 5f2:	0a c0       	rjmp	.+20     	; 0x608 <Toggle+0x6a>
		AllDisp(tcnt);
 5f4:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 5f8:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x1>
 5fc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end+0x2>
 600:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x3>
 604:	ca de       	rcall	.-620    	; 0x39a <AllDisp>
		char m = 1 << n;
		PORTA |= m;
		_delay_ms(50);
		PORTA &= ~m;
		_delay_ms(50);
		for(int i = 0; i < 10; i++)
 606:	21 96       	adiw	r28, 0x01	; 1
 608:	ca 30       	cpi	r28, 0x0A	; 10
 60a:	d1 05       	cpc	r29, r1
 60c:	9c f3       	brlt	.-26     	; 0x5f4 <Toggle+0x56>
 60e:	c0 e0       	ldi	r28, 0x00	; 0
 610:	d0 e0       	ldi	r29, 0x00	; 0
 612:	0a c0       	rjmp	.+20     	; 0x628 <Toggle+0x8a>
		AllDisp(tcnt);
		for(int i = 0; i < 10; i++)
		AllDisp_state(tcnt);
 614:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 618:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x1>
 61c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end+0x2>
 620:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x3>
 624:	3b df       	rcall	.-394    	; 0x49c <AllDisp_state>
		_delay_ms(50);
		PORTA &= ~m;
		_delay_ms(50);
		for(int i = 0; i < 10; i++)
		AllDisp(tcnt);
		for(int i = 0; i < 10; i++)
 626:	21 96       	adiw	r28, 0x01	; 1
 628:	ca 30       	cpi	r28, 0x0A	; 10
 62a:	d1 05       	cpc	r29, r1
 62c:	9c f3       	brlt	.-26     	; 0x614 <Toggle+0x76>
	return arr;
}

void Toggle(char m)						// 설정 시간 도달 시 알림용 Toggle 함수
{
	for(int n = 0; n < 3; n++)
 62e:	0f 5f       	subi	r16, 0xFF	; 255
 630:	1f 4f       	sbci	r17, 0xFF	; 255
 632:	03 30       	cpi	r16, 0x03	; 3
 634:	11 05       	cpc	r17, r1
 636:	0c f4       	brge	.+2      	; 0x63a <Toggle+0x9c>
 638:	b9 cf       	rjmp	.-142    	; 0x5ac <Toggle+0xe>
		for(int i = 0; i < 10; i++)
		AllDisp(tcnt);
		for(int i = 0; i < 10; i++)
		AllDisp_state(tcnt);
	}
}
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	1f 91       	pop	r17
 640:	0f 91       	pop	r16
 642:	08 95       	ret

00000644 <main>:



int main(void)
{
	PortSet(&PORTC, &PORTD);
 644:	62 e3       	ldi	r22, 0x32	; 50
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	85 e3       	ldi	r24, 0x35	; 53
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	3d dd       	rcall	.-1414   	; 0xc8 <PortSet>
	PORTE = 0x07;
 64e:	87 e0       	ldi	r24, 0x07	; 7
 650:	83 b9       	out	0x03, r24	; 3
	DDRA = 0x0F;
 652:	8f e0       	ldi	r24, 0x0F	; 15
 654:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x0F;
 656:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
 658:	8f ef       	ldi	r24, 0xFF	; 255
 65a:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x00;
 65c:	12 b8       	out	0x02, r1	; 2

	EIMSK = 0x70;		// 0111 0000	//INT 4~INT 6 활성화
 65e:	80 e7       	ldi	r24, 0x70	; 112
 660:	89 bf       	out	0x39, r24	; 57
	EICRB = 0x2a;		//4개의 B그룹(INT4~INT7)의 인터럽트 발생 시점 결정(00 10 10 10, 각 7 6 5 4에서의 INT발생 시점을 rising edge로 결정)
 662:	8a e2       	ldi	r24, 0x2A	; 42
 664:	8a bf       	out	0x3a, r24	; 58

	TIMSK |= 0x04;		// 16bit - 0000 0100b - Timer 2 TCNT overflow interrupt
 666:	87 b7       	in	r24, 0x37	; 55
 668:	84 60       	ori	r24, 0x04	; 4
 66a:	87 bf       	out	0x37, r24	; 55
	TCCR1B = 0x04;		// 분주비(Pre-scaler) 64
 66c:	84 e0       	ldi	r24, 0x04	; 4
 66e:	8e bd       	out	0x2e, r24	; 46

	SREG |= 0x80;		//status Register - 인터럽트 허용 상태 레지스터
 670:	8f b7       	in	r24, 0x3f	; 63
 672:	80 68       	ori	r24, 0x80	; 128
 674:	8f bf       	out	0x3f, r24	; 63
	sei();
 676:	78 94       	sei
    while (1) 
    {
	PORTD = 0x3F;
 678:	8f e3       	ldi	r24, 0x3F	; 63
 67a:	82 bb       	out	0x12, r24	; 18
	if((cnt == tcnt) && (cnt != 0))
 67c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <cnt>
 680:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cnt+0x1>
 684:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <cnt+0x2>
 688:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <cnt+0x3>
 68c:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <__data_end>
 690:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <__data_end+0x1>
 694:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <__data_end+0x2>
 698:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <__data_end+0x3>
 69c:	84 17       	cp	r24, r20
 69e:	95 07       	cpc	r25, r21
 6a0:	a6 07       	cpc	r26, r22
 6a2:	b7 07       	cpc	r27, r23
 6a4:	71 f4       	brne	.+28     	; 0x6c2 <main+0x7e>
 6a6:	89 2b       	or	r24, r25
 6a8:	8a 2b       	or	r24, r26
 6aa:	8b 2b       	or	r24, r27
 6ac:	21 f4       	brne	.+8      	; 0x6b6 <main+0x72>
 6ae:	09 c0       	rjmp	.+18     	; 0x6c2 <main+0x7e>
	{
		while(reset == 0)
		{
			char m;
			Toggle(m);	// 시간에 도달하면 LED와 Segment가 함께 깜박이는 역할
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	74 df       	rcall	.-280    	; 0x59e <Toggle>
    while (1) 
    {
	PORTD = 0x3F;
	if((cnt == tcnt) && (cnt != 0))
	{
		while(reset == 0)
 6b6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <reset>
 6ba:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <reset+0x1>
 6be:	89 2b       	or	r24, r25
 6c0:	b9 f3       	breq	.-18     	; 0x6b0 <main+0x6c>
		{
			char m;
			Toggle(m);	// 시간에 도달하면 LED와 Segment가 함께 깜박이는 역할
		}
	}
	if(state != 0)		// state(가운데 = 숫자 변경용) 이 동작하면
 6c2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 6c6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 6ca:	89 2b       	or	r24, r25
 6cc:	09 f5       	brne	.+66     	; 0x710 <main+0xcc>
 6ce:	2f c0       	rjmp	.+94     	; 0x72e <main+0xea>
	{
		while(0 < state && state < 5)	// 1 ~ 4동안 변경할 자릿 수 점등
		{
			for(int i = 0; i < 50; i++)	// delay를 주고 설정카운트 전체 점등
			AllDisp(tcnt);
 6d0:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 6d4:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x1>
 6d8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end+0x2>
 6dc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x3>
 6e0:	5c de       	rcall	.-840    	; 0x39a <AllDisp>
	}
	if(state != 0)		// state(가운데 = 숫자 변경용) 이 동작하면
	{
		while(0 < state && state < 5)	// 1 ~ 4동안 변경할 자릿 수 점등
		{
			for(int i = 0; i < 50; i++)	// delay를 주고 설정카운트 전체 점등
 6e2:	21 96       	adiw	r28, 0x01	; 1
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <main+0xa6>
 6e6:	c0 e0       	ldi	r28, 0x00	; 0
 6e8:	d0 e0       	ldi	r29, 0x00	; 0
 6ea:	c2 33       	cpi	r28, 0x32	; 50
 6ec:	d1 05       	cpc	r29, r1
 6ee:	84 f3       	brlt	.-32     	; 0x6d0 <main+0x8c>
 6f0:	c0 e0       	ldi	r28, 0x00	; 0
 6f2:	d0 e0       	ldi	r29, 0x00	; 0
 6f4:	0a c0       	rjmp	.+20     	; 0x70a <main+0xc6>
			AllDisp(tcnt);
			for(int i = 0; i < 50; i++)	// delay를 주고 설정 카운트 중 설정할 값 제외하고 점등
			AllDisp_state(tcnt); continue;
 6f6:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 6fa:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x1>
 6fe:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end+0x2>
 702:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x3>
 706:	ca de       	rcall	.-620    	; 0x49c <AllDisp_state>
	{
		while(0 < state && state < 5)	// 1 ~ 4동안 변경할 자릿 수 점등
		{
			for(int i = 0; i < 50; i++)	// delay를 주고 설정카운트 전체 점등
			AllDisp(tcnt);
			for(int i = 0; i < 50; i++)	// delay를 주고 설정 카운트 중 설정할 값 제외하고 점등
 708:	21 96       	adiw	r28, 0x01	; 1
 70a:	c2 33       	cpi	r28, 0x32	; 50
 70c:	d1 05       	cpc	r29, r1
 70e:	9c f3       	brlt	.-26     	; 0x6f6 <main+0xb2>
			Toggle(m);	// 시간에 도달하면 LED와 Segment가 함께 깜박이는 역할
		}
	}
	if(state != 0)		// state(가운데 = 숫자 변경용) 이 동작하면
	{
		while(0 < state && state < 5)	// 1 ~ 4동안 변경할 자릿 수 점등
 710:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 714:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 718:	18 16       	cp	r1, r24
 71a:	19 06       	cpc	r1, r25
 71c:	0c f0       	brlt	.+2      	; 0x720 <main+0xdc>
 71e:	ac cf       	rjmp	.-168    	; 0x678 <main+0x34>
 720:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 724:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 728:	05 97       	sbiw	r24, 0x05	; 5
 72a:	ec f2       	brlt	.-70     	; 0x6e6 <main+0xa2>
 72c:	a5 cf       	rjmp	.-182    	; 0x678 <main+0x34>
			AllDisp(tcnt);
			for(int i = 0; i < 50; i++)	// delay를 주고 설정 카운트 중 설정할 값 제외하고 점등
			AllDisp_state(tcnt); continue;
		}
	}
	else if(opt != 0)	// opt(첫번 째 = 시작/정지 버튼) 이 동작하면
 72e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <opt>
 732:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <opt+0x1>
 736:	89 2b       	or	r24, r25
 738:	09 f4       	brne	.+2      	; 0x73c <main+0xf8>
 73a:	41 c0       	rjmp	.+130    	; 0x7be <main+0x17a>
	{
		switch(opt)
 73c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <opt>
 740:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <opt+0x1>
 744:	82 30       	cpi	r24, 0x02	; 2
 746:	91 05       	cpc	r25, r1
 748:	39 f1       	breq	.+78     	; 0x798 <main+0x154>
 74a:	1c f4       	brge	.+6      	; 0x752 <main+0x10e>
 74c:	01 97       	sbiw	r24, 0x01	; 1
 74e:	99 f0       	breq	.+38     	; 0x776 <main+0x132>
 750:	31 c0       	rjmp	.+98     	; 0x7b4 <main+0x170>
 752:	83 30       	cpi	r24, 0x03	; 3
 754:	91 05       	cpc	r25, r1
 756:	09 f4       	brne	.+2      	; 0x75a <main+0x116>
 758:	8f cf       	rjmp	.-226    	; 0x678 <main+0x34>
 75a:	04 97       	sbiw	r24, 0x04	; 4
 75c:	19 f1       	breq	.+70     	; 0x7a4 <main+0x160>
 75e:	2a c0       	rjmp	.+84     	; 0x7b4 <main+0x170>
		{
			case 1:	
			for(int i = 0; i < 50; i++)	 DecDisp(cnt); continue;		// 1번 누르면 시작
 760:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <cnt>
 764:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <cnt+0x1>
 768:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cnt+0x2>
 76c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cnt+0x3>
 770:	52 dd       	rcall	.-1372   	; 0x216 <DecDisp>
 772:	21 96       	adiw	r28, 0x01	; 1
 774:	02 c0       	rjmp	.+4      	; 0x77a <main+0x136>
			AllDisp_state(tcnt); continue;
		}
	}
	else if(opt != 0)	// opt(첫번 째 = 시작/정지 버튼) 이 동작하면
	{
		switch(opt)
 776:	c0 e0       	ldi	r28, 0x00	; 0
 778:	d0 e0       	ldi	r29, 0x00	; 0
		{
			case 1:	
			for(int i = 0; i < 50; i++)	 DecDisp(cnt); continue;		// 1번 누르면 시작
 77a:	c2 33       	cpi	r28, 0x32	; 50
 77c:	d1 05       	cpc	r29, r1
 77e:	84 f3       	brlt	.-32     	; 0x760 <main+0x11c>
 780:	7b cf       	rjmp	.-266    	; 0x678 <main+0x34>
			case 2: 
			for(int i = 0; i < 50; i++)	 DecDisp(cnt); continue;		// 2번 누르면 멈춤
 782:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <cnt>
 786:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <cnt+0x1>
 78a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cnt+0x2>
 78e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cnt+0x3>
 792:	41 dd       	rcall	.-1406   	; 0x216 <DecDisp>
 794:	21 96       	adiw	r28, 0x01	; 1
 796:	02 c0       	rjmp	.+4      	; 0x79c <main+0x158>
			AllDisp_state(tcnt); continue;
		}
	}
	else if(opt != 0)	// opt(첫번 째 = 시작/정지 버튼) 이 동작하면
	{
		switch(opt)
 798:	c0 e0       	ldi	r28, 0x00	; 0
 79a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			case 1:	
			for(int i = 0; i < 50; i++)	 DecDisp(cnt); continue;		// 1번 누르면 시작
			case 2: 
			for(int i = 0; i < 50; i++)	 DecDisp(cnt); continue;		// 2번 누르면 멈춤
 79c:	c2 33       	cpi	r28, 0x32	; 50
 79e:	d1 05       	cpc	r29, r1
 7a0:	84 f3       	brlt	.-32     	; 0x782 <main+0x13e>
 7a2:	6a cf       	rjmp	.-300    	; 0x678 <main+0x34>
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 7a4:	98 e0       	ldi	r25, 0x08	; 8
 7a6:	88 e1       	ldi	r24, 0x18	; 24
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	f8 94       	cli
 7ac:	a8 95       	wdr
 7ae:	81 bd       	out	0x21, r24	; 33
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	91 bd       	out	0x21, r25	; 33
			case 3: continue;											// 3번 누르면 0
			case 4:	wdt_enable(WDTO_15MS);								// 4번 누르면 reset
			default : opt = 0; break;
 7b4:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <opt+0x1>
 7b8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <opt>
 7bc:	5d cf       	rjmp	.-326    	; 0x678 <main+0x34>
		}
	}

	else if(reset != 0)	//reset이 동작하면.
 7be:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <reset>
 7c2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <reset+0x1>
 7c6:	89 2b       	or	r24, r25
 7c8:	09 f4       	brne	.+2      	; 0x7cc <main+0x188>
 7ca:	56 cf       	rjmp	.-340    	; 0x678 <main+0x34>
	{
		switch(reset)
 7cc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <reset>
 7d0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <reset+0x1>
 7d4:	01 97       	sbiw	r24, 0x01	; 1
 7d6:	89 f4       	brne	.+34     	; 0x7fa <main+0x1b6>
		{
			case 1: cnt = 0, tcnt = 0; continue;						// 카운트된 값 초기화
 7d8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <cnt>
 7dc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <cnt+0x1>
 7e0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <cnt+0x2>
 7e4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <cnt+0x3>
 7e8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 7ec:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 7f0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end+0x2>
 7f4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x3>
 7f8:	3f cf       	rjmp	.-386    	; 0x678 <main+0x34>
			default: reset = 0; cnt = 0, tcnt = 0; break;				// 카운트된 값 초기화(안전용)
 7fa:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <reset+0x1>
 7fe:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <reset>
 802:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <cnt>
 806:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <cnt+0x1>
 80a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <cnt+0x2>
 80e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <cnt+0x3>
 812:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 816:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 81a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end+0x2>
 81e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x3>
 822:	2a cf       	rjmp	.-428    	; 0x678 <main+0x34>

00000824 <__vector_14>:
		}
	}
    }
}
ISR(TIMER1_OVF_vect)
{
 824:	1f 92       	push	r1
 826:	0f 92       	push	r0
 828:	0f b6       	in	r0, 0x3f	; 63
 82a:	0f 92       	push	r0
 82c:	11 24       	eor	r1, r1
 82e:	8f 93       	push	r24
 830:	9f 93       	push	r25
 832:	af 93       	push	r26
 834:	bf 93       	push	r27
	if((opt == 1) && (state == 0))	cnt++;			// opt만 1번 동작하고 state는 동작하지 않으면 cnt 올라간다.
 836:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <opt>
 83a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <opt+0x1>
 83e:	01 97       	sbiw	r24, 0x01	; 1
 840:	c9 f4       	brne	.+50     	; 0x874 <__vector_14+0x50>
 842:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 846:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 84a:	89 2b       	or	r24, r25
 84c:	99 f4       	brne	.+38     	; 0x874 <__vector_14+0x50>
 84e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <cnt>
 852:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cnt+0x1>
 856:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <cnt+0x2>
 85a:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <cnt+0x3>
 85e:	01 96       	adiw	r24, 0x01	; 1
 860:	a1 1d       	adc	r26, r1
 862:	b1 1d       	adc	r27, r1
 864:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <cnt>
 868:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <cnt+0x1>
 86c:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <cnt+0x2>
 870:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <cnt+0x3>
}
 874:	bf 91       	pop	r27
 876:	af 91       	pop	r26
 878:	9f 91       	pop	r25
 87a:	8f 91       	pop	r24
 87c:	0f 90       	pop	r0
 87e:	0f be       	out	0x3f, r0	; 63
 880:	0f 90       	pop	r0
 882:	1f 90       	pop	r1
 884:	18 95       	reti

00000886 <__vector_5>:
ISR(INT4_vect)										// 왼쪽(적색) 스위치
{		
 886:	1f 92       	push	r1
 888:	0f 92       	push	r0
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	0f 92       	push	r0
 88e:	11 24       	eor	r1, r1
 890:	0b b6       	in	r0, 0x3b	; 59
 892:	0f 92       	push	r0
 894:	cf 92       	push	r12
 896:	df 92       	push	r13
 898:	ef 92       	push	r14
 89a:	ff 92       	push	r15
 89c:	2f 93       	push	r18
 89e:	3f 93       	push	r19
 8a0:	4f 93       	push	r20
 8a2:	5f 93       	push	r21
 8a4:	6f 93       	push	r22
 8a6:	7f 93       	push	r23
 8a8:	8f 93       	push	r24
 8aa:	9f 93       	push	r25
 8ac:	af 93       	push	r26
 8ae:	bf 93       	push	r27
 8b0:	ef 93       	push	r30
 8b2:	ff 93       	push	r31
	if(state == 1)									// state 1이면 1의 자리 증가
 8b4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 8b8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 8bc:	01 97       	sbiw	r24, 0x01	; 1
 8be:	79 f5       	brne	.+94     	; 0x91e <__vector_5+0x98>
	{
		tcnt++;
 8c0:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <__data_end>
 8c4:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <__data_end+0x1>
 8c8:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <__data_end+0x2>
 8cc:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <__data_end+0x3>
 8d0:	8f ef       	ldi	r24, 0xFF	; 255
 8d2:	c8 1a       	sub	r12, r24
 8d4:	d8 0a       	sbc	r13, r24
 8d6:	e8 0a       	sbc	r14, r24
 8d8:	f8 0a       	sbc	r15, r24
 8da:	c0 92 10 01 	sts	0x0110, r12	; 0x800110 <__data_end>
 8de:	d0 92 11 01 	sts	0x0111, r13	; 0x800111 <__data_end+0x1>
 8e2:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <__data_end+0x2>
 8e6:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <__data_end+0x3>
		if((tcnt % 10) == 0) tcnt-=10;				// 9에서 10으로 넘어가면 -10
 8ea:	c7 01       	movw	r24, r14
 8ec:	b6 01       	movw	r22, r12
 8ee:	2a e0       	ldi	r18, 0x0A	; 10
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	40 e0       	ldi	r20, 0x00	; 0
 8f4:	50 e0       	ldi	r21, 0x00	; 0
 8f6:	67 d1       	rcall	.+718    	; 0xbc6 <__udivmodsi4>
 8f8:	67 2b       	or	r22, r23
 8fa:	68 2b       	or	r22, r24
 8fc:	69 2b       	or	r22, r25
 8fe:	09 f0       	breq	.+2      	; 0x902 <__vector_5+0x7c>
 900:	e8 c0       	rjmp	.+464    	; 0xad2 <__vector_5+0x24c>
 902:	8a e0       	ldi	r24, 0x0A	; 10
 904:	c8 1a       	sub	r12, r24
 906:	d1 08       	sbc	r13, r1
 908:	e1 08       	sbc	r14, r1
 90a:	f1 08       	sbc	r15, r1
 90c:	c0 92 10 01 	sts	0x0110, r12	; 0x800110 <__data_end>
 910:	d0 92 11 01 	sts	0x0111, r13	; 0x800111 <__data_end+0x1>
 914:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <__data_end+0x2>
 918:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <__data_end+0x3>
 91c:	da c0       	rjmp	.+436    	; 0xad2 <__vector_5+0x24c>
	}	
	else if(state == 2)								// state 2이면 10의 자리 증가
 91e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 922:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 926:	02 97       	sbiw	r24, 0x02	; 2
 928:	b1 f5       	brne	.+108    	; 0x996 <__vector_5+0x110>
	{
		(tcnt += 10);
 92a:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <__data_end>
 92e:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <__data_end+0x1>
 932:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <__data_end+0x2>
 936:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <__data_end+0x3>
 93a:	8a e0       	ldi	r24, 0x0A	; 10
 93c:	c8 0e       	add	r12, r24
 93e:	d1 1c       	adc	r13, r1
 940:	e1 1c       	adc	r14, r1
 942:	f1 1c       	adc	r15, r1
 944:	c0 92 10 01 	sts	0x0110, r12	; 0x800110 <__data_end>
 948:	d0 92 11 01 	sts	0x0111, r13	; 0x800111 <__data_end+0x1>
 94c:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <__data_end+0x2>
 950:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <__data_end+0x3>
		if(((tcnt / 10) % 6) == 0) tcnt-=60;		// 5에서 6으로 넘어가면 -60
 954:	c7 01       	movw	r24, r14
 956:	b6 01       	movw	r22, r12
 958:	2a e0       	ldi	r18, 0x0A	; 10
 95a:	30 e0       	ldi	r19, 0x00	; 0
 95c:	40 e0       	ldi	r20, 0x00	; 0
 95e:	50 e0       	ldi	r21, 0x00	; 0
 960:	32 d1       	rcall	.+612    	; 0xbc6 <__udivmodsi4>
 962:	ca 01       	movw	r24, r20
 964:	b9 01       	movw	r22, r18
 966:	26 e0       	ldi	r18, 0x06	; 6
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	40 e0       	ldi	r20, 0x00	; 0
 96c:	50 e0       	ldi	r21, 0x00	; 0
 96e:	2b d1       	rcall	.+598    	; 0xbc6 <__udivmodsi4>
 970:	67 2b       	or	r22, r23
 972:	68 2b       	or	r22, r24
 974:	69 2b       	or	r22, r25
 976:	09 f0       	breq	.+2      	; 0x97a <__vector_5+0xf4>
 978:	ac c0       	rjmp	.+344    	; 0xad2 <__vector_5+0x24c>
 97a:	8c e3       	ldi	r24, 0x3C	; 60
 97c:	c8 1a       	sub	r12, r24
 97e:	d1 08       	sbc	r13, r1
 980:	e1 08       	sbc	r14, r1
 982:	f1 08       	sbc	r15, r1
 984:	c0 92 10 01 	sts	0x0110, r12	; 0x800110 <__data_end>
 988:	d0 92 11 01 	sts	0x0111, r13	; 0x800111 <__data_end+0x1>
 98c:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <__data_end+0x2>
 990:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <__data_end+0x3>
 994:	9e c0       	rjmp	.+316    	; 0xad2 <__vector_5+0x24c>
	}		
	else if(state == 3)								// state 3이면 세번째 자리 증가
 996:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 99a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 99e:	03 97       	sbiw	r24, 0x03	; 3
 9a0:	b9 f5       	brne	.+110    	; 0xa10 <__vector_5+0x18a>
	{
		(tcnt += 60);\
 9a2:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <__data_end>
 9a6:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <__data_end+0x1>
 9aa:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <__data_end+0x2>
 9ae:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <__data_end+0x3>
 9b2:	8c e3       	ldi	r24, 0x3C	; 60
 9b4:	c8 0e       	add	r12, r24
 9b6:	d1 1c       	adc	r13, r1
 9b8:	e1 1c       	adc	r14, r1
 9ba:	f1 1c       	adc	r15, r1
 9bc:	c0 92 10 01 	sts	0x0110, r12	; 0x800110 <__data_end>
 9c0:	d0 92 11 01 	sts	0x0111, r13	; 0x800111 <__data_end+0x1>
 9c4:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <__data_end+0x2>
 9c8:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <__data_end+0x3>
		if(((tcnt / 60) % 10) == 0) tcnt-=600;		// 9에서 10으로 넘어가면 -600
 9cc:	c7 01       	movw	r24, r14
 9ce:	b6 01       	movw	r22, r12
 9d0:	2c e3       	ldi	r18, 0x3C	; 60
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	40 e0       	ldi	r20, 0x00	; 0
 9d6:	50 e0       	ldi	r21, 0x00	; 0
 9d8:	f6 d0       	rcall	.+492    	; 0xbc6 <__udivmodsi4>
 9da:	ca 01       	movw	r24, r20
 9dc:	b9 01       	movw	r22, r18
 9de:	2a e0       	ldi	r18, 0x0A	; 10
 9e0:	30 e0       	ldi	r19, 0x00	; 0
 9e2:	40 e0       	ldi	r20, 0x00	; 0
 9e4:	50 e0       	ldi	r21, 0x00	; 0
 9e6:	ef d0       	rcall	.+478    	; 0xbc6 <__udivmodsi4>
 9e8:	67 2b       	or	r22, r23
 9ea:	68 2b       	or	r22, r24
 9ec:	69 2b       	or	r22, r25
 9ee:	09 f0       	breq	.+2      	; 0x9f2 <__vector_5+0x16c>
 9f0:	70 c0       	rjmp	.+224    	; 0xad2 <__vector_5+0x24c>
 9f2:	88 e5       	ldi	r24, 0x58	; 88
 9f4:	c8 1a       	sub	r12, r24
 9f6:	82 e0       	ldi	r24, 0x02	; 2
 9f8:	d8 0a       	sbc	r13, r24
 9fa:	e1 08       	sbc	r14, r1
 9fc:	f1 08       	sbc	r15, r1
 9fe:	c0 92 10 01 	sts	0x0110, r12	; 0x800110 <__data_end>
 a02:	d0 92 11 01 	sts	0x0111, r13	; 0x800111 <__data_end+0x1>
 a06:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <__data_end+0x2>
 a0a:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <__data_end+0x3>
 a0e:	61 c0       	rjmp	.+194    	; 0xad2 <__vector_5+0x24c>
	}		
	else if(state == 4)								// state 4이면 네 번째 자리 증가
 a10:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 a14:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 a18:	04 97       	sbiw	r24, 0x04	; 4
 a1a:	b9 f5       	brne	.+110    	; 0xa8a <__vector_5+0x204>
	{
		(tcnt += 600);	
 a1c:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <__data_end>
 a20:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <__data_end+0x1>
 a24:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <__data_end+0x2>
 a28:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <__data_end+0x3>
 a2c:	88 e5       	ldi	r24, 0x58	; 88
 a2e:	c8 0e       	add	r12, r24
 a30:	82 e0       	ldi	r24, 0x02	; 2
 a32:	d8 1e       	adc	r13, r24
 a34:	e1 1c       	adc	r14, r1
 a36:	f1 1c       	adc	r15, r1
 a38:	c0 92 10 01 	sts	0x0110, r12	; 0x800110 <__data_end>
 a3c:	d0 92 11 01 	sts	0x0111, r13	; 0x800111 <__data_end+0x1>
 a40:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <__data_end+0x2>
 a44:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <__data_end+0x3>
		if(((tcnt / 600) % 10) == 0) tcnt-=6000;	// 5에서 6으로 넘어가면 -6000
 a48:	c7 01       	movw	r24, r14
 a4a:	b6 01       	movw	r22, r12
 a4c:	28 e5       	ldi	r18, 0x58	; 88
 a4e:	32 e0       	ldi	r19, 0x02	; 2
 a50:	40 e0       	ldi	r20, 0x00	; 0
 a52:	50 e0       	ldi	r21, 0x00	; 0
 a54:	b8 d0       	rcall	.+368    	; 0xbc6 <__udivmodsi4>
 a56:	ca 01       	movw	r24, r20
 a58:	b9 01       	movw	r22, r18
 a5a:	2a e0       	ldi	r18, 0x0A	; 10
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	40 e0       	ldi	r20, 0x00	; 0
 a60:	50 e0       	ldi	r21, 0x00	; 0
 a62:	b1 d0       	rcall	.+354    	; 0xbc6 <__udivmodsi4>
 a64:	67 2b       	or	r22, r23
 a66:	68 2b       	or	r22, r24
 a68:	69 2b       	or	r22, r25
 a6a:	99 f5       	brne	.+102    	; 0xad2 <__vector_5+0x24c>
 a6c:	80 e7       	ldi	r24, 0x70	; 112
 a6e:	c8 1a       	sub	r12, r24
 a70:	87 e1       	ldi	r24, 0x17	; 23
 a72:	d8 0a       	sbc	r13, r24
 a74:	e1 08       	sbc	r14, r1
 a76:	f1 08       	sbc	r15, r1
 a78:	c0 92 10 01 	sts	0x0110, r12	; 0x800110 <__data_end>
 a7c:	d0 92 11 01 	sts	0x0111, r13	; 0x800111 <__data_end+0x1>
 a80:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <__data_end+0x2>
 a84:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <__data_end+0x3>
 a88:	24 c0       	rjmp	.+72     	; 0xad2 <__vector_5+0x24c>
	}	
	else if((state == 0) && (opt > 4))	opt = 0;
 a8a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 a8e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 a92:	89 2b       	or	r24, r25
 a94:	59 f4       	brne	.+22     	; 0xaac <__vector_5+0x226>
 a96:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <opt>
 a9a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <opt+0x1>
 a9e:	05 97       	sbiw	r24, 0x05	; 5
 aa0:	2c f0       	brlt	.+10     	; 0xaac <__vector_5+0x226>
 aa2:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <opt+0x1>
 aa6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <opt>
 aaa:	13 c0       	rjmp	.+38     	; 0xad2 <__vector_5+0x24c>
	else
	{
		opt++;
 aac:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <opt>
 ab0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <opt+0x1>
 ab4:	01 96       	adiw	r24, 0x01	; 1
 ab6:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <opt+0x1>
 aba:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <opt>
		if (opt >= OPTMAX) opt = 0;
 abe:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <opt>
 ac2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <opt+0x1>
 ac6:	0a 97       	sbiw	r24, 0x0a	; 10
 ac8:	24 f0       	brlt	.+8      	; 0xad2 <__vector_5+0x24c>
 aca:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <opt+0x1>
 ace:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <opt>
	}
}
 ad2:	ff 91       	pop	r31
 ad4:	ef 91       	pop	r30
 ad6:	bf 91       	pop	r27
 ad8:	af 91       	pop	r26
 ada:	9f 91       	pop	r25
 adc:	8f 91       	pop	r24
 ade:	7f 91       	pop	r23
 ae0:	6f 91       	pop	r22
 ae2:	5f 91       	pop	r21
 ae4:	4f 91       	pop	r20
 ae6:	3f 91       	pop	r19
 ae8:	2f 91       	pop	r18
 aea:	ff 90       	pop	r15
 aec:	ef 90       	pop	r14
 aee:	df 90       	pop	r13
 af0:	cf 90       	pop	r12
 af2:	0f 90       	pop	r0
 af4:	0b be       	out	0x3b, r0	; 59
 af6:	0f 90       	pop	r0
 af8:	0f be       	out	0x3f, r0	; 63
 afa:	0f 90       	pop	r0
 afc:	1f 90       	pop	r1
 afe:	18 95       	reti

00000b00 <__vector_6>:
ISR(INT5_vect)										// 가운데(주황색) 스위치
{	
 b00:	1f 92       	push	r1
 b02:	0f 92       	push	r0
 b04:	0f b6       	in	r0, 0x3f	; 63
 b06:	0f 92       	push	r0
 b08:	11 24       	eor	r1, r1
 b0a:	8f 93       	push	r24
 b0c:	9f 93       	push	r25
	state++;
 b0e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 b12:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 b16:	01 96       	adiw	r24, 0x01	; 1
 b18:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <state+0x1>
 b1c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <state>
	if (state >= STATEMAX) state = 0;
 b20:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 b24:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <state+0x1>
 b28:	05 97       	sbiw	r24, 0x05	; 5
 b2a:	24 f0       	brlt	.+8      	; 0xb34 <__vector_6+0x34>
 b2c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <state+0x1>
 b30:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <state>
}
 b34:	9f 91       	pop	r25
 b36:	8f 91       	pop	r24
 b38:	0f 90       	pop	r0
 b3a:	0f be       	out	0x3f, r0	; 63
 b3c:	0f 90       	pop	r0
 b3e:	1f 90       	pop	r1
 b40:	18 95       	reti

00000b42 <__vector_7>:
ISR(INT6_vect)										// 오른쪽(노란색) 스위치
{	
 b42:	1f 92       	push	r1
 b44:	0f 92       	push	r0
 b46:	0f b6       	in	r0, 0x3f	; 63
 b48:	0f 92       	push	r0
 b4a:	11 24       	eor	r1, r1
 b4c:	8f 93       	push	r24
 b4e:	9f 93       	push	r25
	reset++;
 b50:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <reset>
 b54:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <reset+0x1>
 b58:	01 96       	adiw	r24, 0x01	; 1
 b5a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <reset+0x1>
 b5e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <reset>
	state = 0;
 b62:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <state+0x1>
 b66:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <state>
	opt = 0;
 b6a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <opt+0x1>
 b6e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <opt>
 b72:	98 e0       	ldi	r25, 0x08	; 8
 b74:	88 e1       	ldi	r24, 0x18	; 24
 b76:	0f b6       	in	r0, 0x3f	; 63
 b78:	f8 94       	cli
 b7a:	a8 95       	wdr
 b7c:	81 bd       	out	0x21, r24	; 33
 b7e:	0f be       	out	0x3f, r0	; 63
 b80:	91 bd       	out	0x21, r25	; 33
	wdt_enable(WDTO_15MS);							//Reset
	wdt_reset();
 b82:	a8 95       	wdr
	if (reset >= RESETMAX) 
 b84:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <reset>
 b88:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <reset+0x1>
 b8c:	02 97       	sbiw	r24, 0x02	; 2
 b8e:	a4 f0       	brlt	.+40     	; 0xbb8 <__vector_7+0x76>
	{
		reset = 0;
 b90:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <reset+0x1>
 b94:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <reset>
		cnt = 0, tcnt = 0;
 b98:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <cnt>
 b9c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <cnt+0x1>
 ba0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <cnt+0x2>
 ba4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <cnt+0x3>
 ba8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 bac:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 bb0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end+0x2>
 bb4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x3>
	}
}
 bb8:	9f 91       	pop	r25
 bba:	8f 91       	pop	r24
 bbc:	0f 90       	pop	r0
 bbe:	0f be       	out	0x3f, r0	; 63
 bc0:	0f 90       	pop	r0
 bc2:	1f 90       	pop	r1
 bc4:	18 95       	reti

00000bc6 <__udivmodsi4>:
 bc6:	a1 e2       	ldi	r26, 0x21	; 33
 bc8:	1a 2e       	mov	r1, r26
 bca:	aa 1b       	sub	r26, r26
 bcc:	bb 1b       	sub	r27, r27
 bce:	fd 01       	movw	r30, r26
 bd0:	0d c0       	rjmp	.+26     	; 0xbec <__udivmodsi4_ep>

00000bd2 <__udivmodsi4_loop>:
 bd2:	aa 1f       	adc	r26, r26
 bd4:	bb 1f       	adc	r27, r27
 bd6:	ee 1f       	adc	r30, r30
 bd8:	ff 1f       	adc	r31, r31
 bda:	a2 17       	cp	r26, r18
 bdc:	b3 07       	cpc	r27, r19
 bde:	e4 07       	cpc	r30, r20
 be0:	f5 07       	cpc	r31, r21
 be2:	20 f0       	brcs	.+8      	; 0xbec <__udivmodsi4_ep>
 be4:	a2 1b       	sub	r26, r18
 be6:	b3 0b       	sbc	r27, r19
 be8:	e4 0b       	sbc	r30, r20
 bea:	f5 0b       	sbc	r31, r21

00000bec <__udivmodsi4_ep>:
 bec:	66 1f       	adc	r22, r22
 bee:	77 1f       	adc	r23, r23
 bf0:	88 1f       	adc	r24, r24
 bf2:	99 1f       	adc	r25, r25
 bf4:	1a 94       	dec	r1
 bf6:	69 f7       	brne	.-38     	; 0xbd2 <__udivmodsi4_loop>
 bf8:	60 95       	com	r22
 bfa:	70 95       	com	r23
 bfc:	80 95       	com	r24
 bfe:	90 95       	com	r25
 c00:	9b 01       	movw	r18, r22
 c02:	ac 01       	movw	r20, r24
 c04:	bd 01       	movw	r22, r26
 c06:	cf 01       	movw	r24, r30
 c08:	08 95       	ret

00000c0a <_exit>:
 c0a:	f8 94       	cli

00000c0c <__stop_program>:
 c0c:	ff cf       	rjmp	.-2      	; 0xc0c <__stop_program>
