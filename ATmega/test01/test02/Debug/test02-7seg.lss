
test02-7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000039a  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800110  00800110  0000043e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dab  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090c  00000000  00000000  000012af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b0  00000000  00000000  00001bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  0000226c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000072c6  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000963  00000000  00000000  000095f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00009f55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002a4d  00000000  00000000  00009f9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c2 d0       	rcall	.+388    	; 0x248 <main>
  c4:	68 c1       	rjmp	.+720    	; 0x396 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <seg>:
	{
		PORTC = 0x0b;//~(1 << 3);
		PORTD = ox[x];
		x++;
		_delay_ms(5000);
		if(x == 10) x = 0;
  c8:	25 b3       	in	r18, 0x15	; 21
  ca:	2f 60       	ori	r18, 0x0F	; 15
  cc:	25 bb       	out	0x15, r18	; 21
  ce:	25 b3       	in	r18, 0x15	; 21
  d0:	43 e0       	ldi	r20, 0x03	; 3
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	48 1b       	sub	r20, r24
  d6:	59 0b       	sbc	r21, r25
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <seg+0x1a>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	4a 95       	dec	r20
  e4:	e2 f7       	brpl	.-8      	; 0xde <seg+0x16>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	62 bb       	out	0x12, r22	; 18
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	9f e1       	ldi	r25, 0x1F	; 31
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <seg+0x2a>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <seg+0x30>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <FND_4>:
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	f8 01       	movw	r30, r16
 10c:	61 91       	ld	r22, Z+
 10e:	8f 01       	movw	r16, r30
 110:	ce 01       	movw	r24, r28
 112:	da df       	rcall	.-76     	; 0xc8 <seg>
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	c4 30       	cpi	r28, 0x04	; 4
 118:	d1 05       	cpc	r29, r1
 11a:	b9 f7       	brne	.-18     	; 0x10a <FND_4+0xe>
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	08 95       	ret

00000126 <Trans1>:
 126:	e0 e1       	ldi	r30, 0x10	; 16
 128:	f1 e0       	ldi	r31, 0x01	; 1
 12a:	6a e0       	ldi	r22, 0x0A	; 10
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	0c d1       	rcall	.+536    	; 0x348 <__divmodhi4>
 130:	dc 01       	movw	r26, r24
 132:	a0 50       	subi	r26, 0x00	; 0
 134:	bf 4f       	sbci	r27, 0xFF	; 255
 136:	8c 91       	ld	r24, X
 138:	80 83       	st	Z, r24
 13a:	11 82       	std	Z+1, r1	; 0x01
 13c:	12 82       	std	Z+2, r1	; 0x02
 13e:	13 82       	std	Z+3, r1	; 0x03
 140:	cf 01       	movw	r24, r30
 142:	08 95       	ret

00000144 <Trans2>:
 144:	e0 e1       	ldi	r30, 0x10	; 16
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	2a e0       	ldi	r18, 0x0A	; 10
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	b9 01       	movw	r22, r18
 14e:	fc d0       	rcall	.+504    	; 0x348 <__divmodhi4>
 150:	dc 01       	movw	r26, r24
 152:	a0 50       	subi	r26, 0x00	; 0
 154:	bf 4f       	sbci	r27, 0xFF	; 255
 156:	8c 91       	ld	r24, X
 158:	80 83       	st	Z, r24
 15a:	cb 01       	movw	r24, r22
 15c:	b9 01       	movw	r22, r18
 15e:	f4 d0       	rcall	.+488    	; 0x348 <__divmodhi4>
 160:	dc 01       	movw	r26, r24
 162:	a0 50       	subi	r26, 0x00	; 0
 164:	bf 4f       	sbci	r27, 0xFF	; 255
 166:	8c 91       	ld	r24, X
 168:	81 83       	std	Z+1, r24	; 0x01
 16a:	12 82       	std	Z+2, r1	; 0x02
 16c:	13 82       	std	Z+3, r1	; 0x03
 16e:	cf 01       	movw	r24, r30
 170:	08 95       	ret

00000172 <Trans3>:
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
 178:	e0 e1       	ldi	r30, 0x10	; 16
 17a:	f1 e0       	ldi	r31, 0x01	; 1
 17c:	2a e0       	ldi	r18, 0x0A	; 10
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	b9 01       	movw	r22, r18
 182:	e2 d0       	rcall	.+452    	; 0x348 <__divmodhi4>
 184:	dc 01       	movw	r26, r24
 186:	a0 50       	subi	r26, 0x00	; 0
 188:	bf 4f       	sbci	r27, 0xFF	; 255
 18a:	8c 91       	ld	r24, X
 18c:	80 83       	st	Z, r24
 18e:	cb 01       	movw	r24, r22
 190:	b9 01       	movw	r22, r18
 192:	da d0       	rcall	.+436    	; 0x348 <__divmodhi4>
 194:	dc 01       	movw	r26, r24
 196:	a0 50       	subi	r26, 0x00	; 0
 198:	bf 4f       	sbci	r27, 0xFF	; 255
 19a:	8c 91       	ld	r24, X
 19c:	81 83       	std	Z+1, r24	; 0x01
 19e:	ce 01       	movw	r24, r28
 1a0:	64 e6       	ldi	r22, 0x64	; 100
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	d1 d0       	rcall	.+418    	; 0x348 <__divmodhi4>
 1a6:	cb 01       	movw	r24, r22
 1a8:	b9 01       	movw	r22, r18
 1aa:	ce d0       	rcall	.+412    	; 0x348 <__divmodhi4>
 1ac:	dc 01       	movw	r26, r24
 1ae:	a0 50       	subi	r26, 0x00	; 0
 1b0:	bf 4f       	sbci	r27, 0xFF	; 255
 1b2:	8c 91       	ld	r24, X
 1b4:	82 83       	std	Z+2, r24	; 0x02
 1b6:	13 82       	std	Z+3, r1	; 0x03
 1b8:	cf 01       	movw	r24, r30
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <Trans4>:
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	9c 01       	movw	r18, r24
 1c6:	e0 e1       	ldi	r30, 0x10	; 16
 1c8:	f1 e0       	ldi	r31, 0x01	; 1
 1ca:	ca e0       	ldi	r28, 0x0A	; 10
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
 1ce:	be 01       	movw	r22, r28
 1d0:	bb d0       	rcall	.+374    	; 0x348 <__divmodhi4>
 1d2:	dc 01       	movw	r26, r24
 1d4:	a0 50       	subi	r26, 0x00	; 0
 1d6:	bf 4f       	sbci	r27, 0xFF	; 255
 1d8:	8c 91       	ld	r24, X
 1da:	80 83       	st	Z, r24
 1dc:	cb 01       	movw	r24, r22
 1de:	be 01       	movw	r22, r28
 1e0:	b3 d0       	rcall	.+358    	; 0x348 <__divmodhi4>
 1e2:	dc 01       	movw	r26, r24
 1e4:	a0 50       	subi	r26, 0x00	; 0
 1e6:	bf 4f       	sbci	r27, 0xFF	; 255
 1e8:	8c 91       	ld	r24, X
 1ea:	81 83       	std	Z+1, r24	; 0x01
 1ec:	c9 01       	movw	r24, r18
 1ee:	64 e6       	ldi	r22, 0x64	; 100
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	aa d0       	rcall	.+340    	; 0x348 <__divmodhi4>
 1f4:	cb 01       	movw	r24, r22
 1f6:	be 01       	movw	r22, r28
 1f8:	a7 d0       	rcall	.+334    	; 0x348 <__divmodhi4>
 1fa:	dc 01       	movw	r26, r24
 1fc:	a0 50       	subi	r26, 0x00	; 0
 1fe:	bf 4f       	sbci	r27, 0xFF	; 255
 200:	8c 91       	ld	r24, X
 202:	82 83       	std	Z+2, r24	; 0x02
 204:	c9 01       	movw	r24, r18
 206:	68 ee       	ldi	r22, 0xE8	; 232
 208:	73 e0       	ldi	r23, 0x03	; 3
 20a:	9e d0       	rcall	.+316    	; 0x348 <__divmodhi4>
 20c:	db 01       	movw	r26, r22
 20e:	a0 50       	subi	r26, 0x00	; 0
 210:	bf 4f       	sbci	r27, 0xFF	; 255
 212:	8c 91       	ld	r24, X
 214:	83 83       	std	Z+3, r24	; 0x03
 216:	2a 30       	cpi	r18, 0x0A	; 10
 218:	31 05       	cpc	r19, r1
 21a:	24 f4       	brge	.+8      	; 0x224 <Trans4+0x64>
 21c:	13 82       	std	Z+3, r1	; 0x03
 21e:	11 82       	std	Z+1, r1	; 0x01
 220:	12 82       	std	Z+2, r1	; 0x02
 222:	0d c0       	rjmp	.+26     	; 0x23e <Trans4+0x7e>
 224:	24 36       	cpi	r18, 0x64	; 100
 226:	31 05       	cpc	r19, r1
 228:	2c f4       	brge	.+10     	; 0x234 <Trans4+0x74>
 22a:	e0 e1       	ldi	r30, 0x10	; 16
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	12 82       	std	Z+2, r1	; 0x02
 230:	13 82       	std	Z+3, r1	; 0x03
 232:	05 c0       	rjmp	.+10     	; 0x23e <Trans4+0x7e>
 234:	28 3e       	cpi	r18, 0xE8	; 232
 236:	33 40       	sbci	r19, 0x03	; 3
 238:	14 f4       	brge	.+4      	; 0x23e <Trans4+0x7e>
 23a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x3>
 23e:	80 e1       	ldi	r24, 0x10	; 16
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <main>:


int main(void)
{
    /* Replace with your application code */
	DDRB &= ~(1<<0);
 248:	b8 98       	cbi	0x17, 0	; 23
	DDRC |= 0x0F;
 24a:	84 b3       	in	r24, 0x14	; 20
 24c:	8f 60       	ori	r24, 0x0F	; 15
 24e:	84 bb       	out	0x14, r24	; 20
	DDRD |= 0xFF;
 250:	81 b3       	in	r24, 0x11	; 17
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	81 bb       	out	0x11, r24	; 17
	
	int i = 0, j = 0;  
 256:	c0 e0       	ldi	r28, 0x00	; 0
 258:	d0 e0       	ldi	r29, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
	  
	while (1) 
    {
		PORTD = 0x40;	
 25e:	68 94       	set
 260:	aa 24       	eor	r10, r10
 262:	a6 f8       	bld	r10, 6
		{
			case 1:
			{
				while(i == 1)
				{
					if(j < 10)	PORTC = 0x07; FND_4(Trans1(j++));					_delay_ms(10);
 264:	0f 2e       	mov	r0, r31
 266:	f7 e0       	ldi	r31, 0x07	; 7
 268:	bf 2e       	mov	r11, r31
 26a:	f0 2d       	mov	r31, r0
					if(j >= 10 && j < 100); PORTC = 0x03; FND_4(Trans2(j++));		_delay_ms(10);
 26c:	0f 2e       	mov	r0, r31
 26e:	f3 e0       	ldi	r31, 0x03	; 3
 270:	ef 2e       	mov	r14, r31
 272:	f0 2d       	mov	r31, r0
					if(j >= 100 && j < 1000); PORTC = 0x01; FND_4(Trans3(j++));		_delay_ms(10);
 274:	ff 24       	eor	r15, r15
 276:	f3 94       	inc	r15
					if(j >= 1000 && j < 10000); PORTC = 0x00;FND_4(Trans4(j++));	_delay_ms(10);
					
					if(!(PINB & 0x01 == 1))
					{
						i++;
 278:	68 94       	set
 27a:	cc 24       	eor	r12, r12
 27c:	c1 f8       	bld	r12, 1
 27e:	d1 2c       	mov	r13, r1
				break;
			}
			default:
			{
				PORTD = 0x40;
				i = 0;
 280:	81 2c       	mov	r8, r1
 282:	91 2c       	mov	r9, r1
 284:	02 c0       	rjmp	.+4      	; 0x28a <main+0x42>
					if(j >= 100 && j < 1000); PORTC = 0x01; FND_4(Trans3(j++));		_delay_ms(10);
					if(j >= 1000 && j < 10000); PORTC = 0x00;FND_4(Trans4(j++));	_delay_ms(10);
					
					if(!(PINB & 0x01 == 1))
					{
						i++;
 286:	8c 2d       	mov	r24, r12
 288:	9d 2d       	mov	r25, r13
	
	int i = 0, j = 0;  
	  
	while (1) 
    {
		PORTD = 0x40;	
 28a:	a2 ba       	out	0x12, r10	; 18
		if(!(PINB & 0x01 == 1))
 28c:	b0 99       	sbic	0x16, 0	; 22
 28e:	55 c0       	rjmp	.+170    	; 0x33a <main+0xf2>
		{
			i++;
 290:	01 96       	adiw	r24, 0x01	; 1
			while(1)
			if(PINB & 0x01 == 1) break;
 292:	b0 9b       	sbis	0x16, 0	; 22
 294:	fe cf       	rjmp	.-4      	; 0x292 <main+0x4a>
		}
		switch (i)
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	91 05       	cpc	r25, r1
 29a:	19 f0       	breq	.+6      	; 0x2a2 <main+0x5a>
 29c:	02 97       	sbiw	r24, 0x02	; 2
 29e:	a9 f1       	breq	.+106    	; 0x30a <main+0xc2>
 2a0:	46 c0       	rjmp	.+140    	; 0x32e <main+0xe6>
		{
			case 1:
			{
				while(i == 1)
				{
					if(j < 10)	PORTC = 0x07; FND_4(Trans1(j++));					_delay_ms(10);
 2a2:	ca 30       	cpi	r28, 0x0A	; 10
 2a4:	d1 05       	cpc	r29, r1
 2a6:	0c f4       	brge	.+2      	; 0x2aa <main+0x62>
 2a8:	b5 ba       	out	0x15, r11	; 21
 2aa:	ce 01       	movw	r24, r28
 2ac:	3c df       	rcall	.-392    	; 0x126 <Trans1>
 2ae:	26 df       	rcall	.-436    	; 0xfc <FND_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	8f e3       	ldi	r24, 0x3F	; 63
 2b2:	9c e9       	ldi	r25, 0x9C	; 156
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0x6c>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0x72>
 2ba:	00 00       	nop
					if(j >= 10 && j < 100); PORTC = 0x03; FND_4(Trans2(j++));		_delay_ms(10);
 2bc:	e5 ba       	out	0x15, r14	; 21
 2be:	ce 01       	movw	r24, r28
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	40 df       	rcall	.-384    	; 0x144 <Trans2>
 2c4:	1b df       	rcall	.-458    	; 0xfc <FND_4>
 2c6:	8f e3       	ldi	r24, 0x3F	; 63
 2c8:	9c e9       	ldi	r25, 0x9C	; 156
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <main+0x82>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x88>
					if(j >= 100 && j < 1000); PORTC = 0x01; FND_4(Trans3(j++));		_delay_ms(10);
 2d0:	00 00       	nop
 2d2:	f5 ba       	out	0x15, r15	; 21
 2d4:	ce 01       	movw	r24, r28
 2d6:	02 96       	adiw	r24, 0x02	; 2
 2d8:	4c df       	rcall	.-360    	; 0x172 <Trans3>
 2da:	10 df       	rcall	.-480    	; 0xfc <FND_4>
 2dc:	8f e3       	ldi	r24, 0x3F	; 63
 2de:	9c e9       	ldi	r25, 0x9C	; 156
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <main+0x98>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x9e>
					if(j >= 1000 && j < 10000); PORTC = 0x00;FND_4(Trans4(j++));	_delay_ms(10);
 2e6:	00 00       	nop
 2e8:	15 ba       	out	0x15, r1	; 21
 2ea:	ce 01       	movw	r24, r28
 2ec:	03 96       	adiw	r24, 0x03	; 3
 2ee:	24 96       	adiw	r28, 0x04	; 4
 2f0:	67 df       	rcall	.-306    	; 0x1c0 <Trans4>
 2f2:	04 df       	rcall	.-504    	; 0xfc <FND_4>
 2f4:	8f e3       	ldi	r24, 0x3F	; 63
 2f6:	9c e9       	ldi	r25, 0x9C	; 156
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <main+0xb0>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0xb6>
 2fe:	00 00       	nop
 300:	b0 99       	sbic	0x16, 0	; 22
					
					if(!(PINB & 0x01 == 1))
 302:	cf cf       	rjmp	.-98     	; 0x2a2 <main+0x5a>
					{
						i++;
						while(1)
						if(PINB & 0x01 == 1) break;
 304:	b0 9b       	sbis	0x16, 0	; 22
 306:	fe cf       	rjmp	.-4      	; 0x304 <main+0xbc>
				}				
				break;
			};
			case 2:
			{
				if(j < 10)	FND_4(Trans1(j));					
 308:	be cf       	rjmp	.-132    	; 0x286 <main+0x3e>
 30a:	ca 30       	cpi	r28, 0x0A	; 10
 30c:	d1 05       	cpc	r29, r1
 30e:	1c f4       	brge	.+6      	; 0x316 <main+0xce>
 310:	ce 01       	movw	r24, r28
				if(j >= 10 && j < 100); FND_4(Trans2(j));		
 312:	09 df       	rcall	.-494    	; 0x126 <Trans1>
 314:	f3 de       	rcall	.-538    	; 0xfc <FND_4>
 316:	ce 01       	movw	r24, r28
 318:	15 df       	rcall	.-470    	; 0x144 <Trans2>
 31a:	f0 de       	rcall	.-544    	; 0xfc <FND_4>
				if(j >= 100 && j < 1000); FND_4(Trans3(j));
 31c:	ce 01       	movw	r24, r28
 31e:	29 df       	rcall	.-430    	; 0x172 <Trans3>
 320:	ed de       	rcall	.-550    	; 0xfc <FND_4>
 322:	ce 01       	movw	r24, r28
 324:	4d df       	rcall	.-358    	; 0x1c0 <Trans4>
				if(j >= 1000 && j < 10000); FND_4(Trans4(j));
 326:	ea de       	rcall	.-556    	; 0xfc <FND_4>
 328:	8c 2d       	mov	r24, r12
 32a:	9d 2d       	mov	r25, r13
 32c:	ae cf       	rjmp	.-164    	; 0x28a <main+0x42>
 32e:	a2 ba       	out	0x12, r10	; 18
				break;
 330:	c0 e0       	ldi	r28, 0x00	; 0
 332:	d0 e0       	ldi	r29, 0x00	; 0
 334:	88 2d       	mov	r24, r8
			}
			default:
			{
				PORTD = 0x40;
 336:	99 2d       	mov	r25, r9
				i = 0;
				j = 0;
 338:	a8 cf       	rjmp	.-176    	; 0x28a <main+0x42>
 33a:	81 30       	cpi	r24, 0x01	; 1
				break;
			}
			default:
			{
				PORTD = 0x40;
				i = 0;
 33c:	91 05       	cpc	r25, r1
 33e:	09 f4       	brne	.+2      	; 0x342 <main+0xfa>
				j = 0;
				break;
 340:	b0 cf       	rjmp	.-160    	; 0x2a2 <main+0x5a>
		{
			i++;
			while(1)
			if(PINB & 0x01 == 1) break;
		}
		switch (i)
 342:	02 97       	sbiw	r24, 0x02	; 2
 344:	11 f3       	breq	.-60     	; 0x30a <main+0xc2>
 346:	f3 cf       	rjmp	.-26     	; 0x32e <main+0xe6>

00000348 <__divmodhi4>:
 348:	97 fb       	bst	r25, 7
 34a:	07 2e       	mov	r0, r23
 34c:	16 f4       	brtc	.+4      	; 0x352 <__divmodhi4+0xa>
 34e:	00 94       	com	r0
 350:	06 d0       	rcall	.+12     	; 0x35e <__divmodhi4_neg1>
 352:	77 fd       	sbrc	r23, 7
 354:	08 d0       	rcall	.+16     	; 0x366 <__divmodhi4_neg2>
 356:	0b d0       	rcall	.+22     	; 0x36e <__udivmodhi4>
 358:	07 fc       	sbrc	r0, 7
 35a:	05 d0       	rcall	.+10     	; 0x366 <__divmodhi4_neg2>
 35c:	3e f4       	brtc	.+14     	; 0x36c <__divmodhi4_exit>

0000035e <__divmodhi4_neg1>:
 35e:	90 95       	com	r25
 360:	81 95       	neg	r24
 362:	9f 4f       	sbci	r25, 0xFF	; 255
 364:	08 95       	ret

00000366 <__divmodhi4_neg2>:
 366:	70 95       	com	r23
 368:	61 95       	neg	r22
 36a:	7f 4f       	sbci	r23, 0xFF	; 255

0000036c <__divmodhi4_exit>:
 36c:	08 95       	ret

0000036e <__udivmodhi4>:
 36e:	aa 1b       	sub	r26, r26
 370:	bb 1b       	sub	r27, r27
 372:	51 e1       	ldi	r21, 0x11	; 17
 374:	07 c0       	rjmp	.+14     	; 0x384 <__udivmodhi4_ep>

00000376 <__udivmodhi4_loop>:
 376:	aa 1f       	adc	r26, r26
 378:	bb 1f       	adc	r27, r27
 37a:	a6 17       	cp	r26, r22
 37c:	b7 07       	cpc	r27, r23
 37e:	10 f0       	brcs	.+4      	; 0x384 <__udivmodhi4_ep>
 380:	a6 1b       	sub	r26, r22
 382:	b7 0b       	sbc	r27, r23

00000384 <__udivmodhi4_ep>:
 384:	88 1f       	adc	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	5a 95       	dec	r21
 38a:	a9 f7       	brne	.-22     	; 0x376 <__udivmodhi4_loop>
 38c:	80 95       	com	r24
 38e:	90 95       	com	r25
 390:	bc 01       	movw	r22, r24
 392:	cd 01       	movw	r24, r26
 394:	08 95       	ret

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
